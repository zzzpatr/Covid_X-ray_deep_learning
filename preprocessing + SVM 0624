{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"preprocessing + SVM 0624","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"NxYdNR9PsoXo"},"source":["# Packages used"]},{"cell_type":"code","metadata":{"id":"osbVQ7E2MFcz"},"source":["import numpy as np\n","import pandas as pd\n","import shutil\n","import os, sys\n","import matplotlib.pyplot as plt\n","\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import f1_score\n","from sklearn.model_selection import cross_validate\n","from sklearn.model_selection import train_test_split\n","from sklearn.svm import SVC\n","from sklearn.decomposition import PCA\n","from sklearn.model_selection import GridSearchCV"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0NFHApcWLIzI"},"source":["import tensorflow as tf\n","from IPython.display import display\n","from IPython.display import Image as _Imgdis\n","from PIL import Image\n","import cv2\n","from keras.preprocessing.image import load_img\n","from keras.preprocessing.image import save_img\n","from keras.preprocessing.image import img_to_array\n","from keras.preprocessing.image import ImageDataGenerator, array_to_img\n","from tensorflow.image import resize"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CxhKN73xst-N"},"source":["# Functions define"]},{"cell_type":"code","metadata":{"id":"bpdG6G28low7"},"source":["# 把圖片轉成陣列\n","def imgtoarray(f, size):\n","  img = load_img(f, color_mode = \"grayscale\")\n","\n","  array = tf.keras.preprocessing.image.img_to_array(img)\n","  array = resize(array, [size, size], method='nearest')\n","  array = array/255.0\n","  arr = array.numpy().ravel()\n","  \n","  return arr"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mbwwQPokpXIi"},"source":["# 處理各個資料夾的圖片檔案\n","def imgpreprocessing(foldername, labels, size):\n","\n","  data = []\n","  for l in labels:\n","    #folder = dir + foldername + '/' +l + '/'\n","    folder = '/content/drive/MyDrive/DM/'+ foldername + '/' +l + '/'\n","    onlyfiles = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\n","    \n","    for i in range(len(onlyfiles)):\n","      f = folder + onlyfiles[i]\n","      a = imgtoarray(f, size)\n","      a = np.append(a, l[0])\n","      data.append(a)\n","\n","      if i%20 == 0:\n","        print(i, 'imgs are done.')\n","    print(l+' is done.')\n","\n","  return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J0VQPR8qyEHk"},"source":["# 處理各個資料夾的圖片檔案(分類別版)\n","def imgpreprocessing2(label, size):\n","\n","  data = []\n","\n","  folder = '/content/drive/MyDrive/DM/train_DG_more/' + label +'/'\n","  onlyfiles = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\n","\n","  for i in range(len(onlyfiles)):\n","    f = folder + onlyfiles[i]\n","    a = imgtoarray(f, size)\n","    a = np.append(a, label[0])\n","    data.append(a)\n","\n","    if i%20 == 0:\n","      print(i, 'imgs are done.')\n","  print(label+' is done.')\n","\n","  return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YJOxR8UsvYRT"},"source":["# Data Augmentation (單張 image) \n","def imagegenerate(f):\n","  img = load_img(f)\n","  plt.imshow(img)\n","  data = img_to_array(img)\n","  samples = np.expand_dims(data, 0)\n","  datagen = ImageDataGenerator(    \n","      rotation_range=5,\n","      width_shift_range=0.05,\n","      height_shift_range=0.05,\n","      zoom_range=0.05)\n","  \n","  datagen.fit(samples)\n","\n","  it = datagen.flow(samples, batch_size=1)\n","  batch = it.next()\n","  image = batch[0].astype('uint8')\n","  img2 = array_to_img(image)\n","  \n","  return img2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mdep_zOn57KL"},"source":["# 儲存產生的images\n","def DataAugmentation(label, quantity):\n","  folder = '/content/drive/MyDrive/DM/train/' + label +'/'\n","  folder_save = '/content/drive/MyDrive/DM/train_DG_more/' + label + '/'\n","  onlyfiles = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\n","\n","  i = quantity\n","  while(i):\n","    j = np.random.randint(len(onlyfiles))\n","    f = folder + onlyfiles[j]\n","    img = imagegenerate(f)\n","    img.save(folder_save + 'DG' + str(quantity-i) +'.jpg', 'JPEG')\n","    i = i-1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V0FBPuxKs0xQ"},"source":["# Main Code - Data preprocessing"]},{"cell_type":"markdown","metadata":{"id":"HbkrlNYwTpDV"},"source":["查看原始資料，並定義資料路徑"]},{"cell_type":"code","metadata":{"id":"OK_kBx0rmPhG"},"source":["# files' path\n","dir = \"/content/drive/Shareddrives/DataMining_2021/Term Project/Data/\"\n","labels = ['Covid', 'Viral Pneumonia', 'Normal']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"r0GGXlO4mQQ1","executionInfo":{"status":"ok","timestamp":1624542494940,"user_tz":-480,"elapsed":2954,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"03ff3899-b924-46d2-b3f3-744210b05b66"},"source":["# 檢查data個分類之平衡問題\n","train_C_num = len(os.listdir(dir + 'train/Covid'))\n","train_V_num = len(os.listdir(dir + 'train/Viral Pneumonia'))\n","train_N_num = len(os.listdir(dir + 'train/Normal'))\n","\n","nums = [train_C_num, train_V_num, train_N_num]\n","print(nums)\n","plt.bar(labels, nums, )\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[111, 70, 70]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"nzkBOwlzUB9t"},"source":["將原始train, test 資料及之圖檔轉換為256*256的陣列"]},{"cell_type":"code","metadata":{"id":"npe6QwHR1GEB"},"source":["# define column names as each pixel and label\n","col = []\n","for i in range(256*256):\n","  col.append('pixel'+str(i+1))\n","col.append('label')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WwKM8nYcvDPc"},"source":["# train data generating\n","train = imgpreprocessing('train', labels, 256)\n","df_train = pd.DataFrame(train, columns = col)\n","df_train.to_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/train.csv', index=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Olsw9JKmLyBV"},"source":["# test data generating\n","test = imgpreprocessing('test', labels, 256)\n","df_test = pd.DataFrame(test, columns = col)\n","df_test.to_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/test.csv', index=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UtO8HvoJUBHT"},"source":["處理train 內資料不平衡的問題，將各類別的資料生至統一111個圖檔（旋轉＋縮放），並將圖檔轉成256*256的陣列"]},{"cell_type":"code","metadata":{"id":"_BUELQL9UrGM"},"source":["# train data with Data Augmentation generating (Rotation, shift, zoom)\n","DataAugmentation('Viral Pneumonia', 111-70)\n","DataAugmentation('Normal', 111-70)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"D6ec1dcpUs29"},"source":["train_DG_ = imgpreprocessing('train_DG', 256)\n","df_train_DG = pd.DataFrame(train_DG, columns = col)\n","df_train_DG.to_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/train_DG.csv', index=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cPSWJKj1UtfH"},"source":["處理train 內資料不平衡的問題，將各類別的資料生至統一500個圖檔（旋轉＋縮放），並將圖檔轉成256*256的陣列"]},{"cell_type":"code","metadata":{"id":"BV_aFaLPCRSp"},"source":["# train data with Data Augmentation generating (Rotation, shift, zoom)\n","DataAugmentation('Covid', 500-111)\n","DataAugmentation('Viral Pneumonia', 500-70)\n","DataAugmentation('Normal', 500-70)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b2npzWjc0LNQ"},"source":["# 因為ram不夠所以各類別先分開處理\n","train_DG_500_C = imgpreprocessing2('Covid', 256)\n","df_train_DG_500_C = pd.DataFrame(train_DG_500_C, columns = col)\n","df_train_DG_500_C.to_csv('/content/drive/MyDrive/DM/train_DG_500_C.csv', index=True)\n","\n","train_DG_500_V = imgpreprocessing2('Viral Pneumonia', 256)\n","df_train_DG_500_V = pd.DataFrame(train_DG_500_V, columns = col)\n","df_train_DG_500_V.to_csv('/content/drive/MyDrive/DM/train_DG_500_V.csv', index=True)\n","\n","train_DG_500_N = imgpreprocessing2('Normal', 256)\n","df_train_DG_500_N = pd.DataFrame(train_DG_500_N, columns = col)\n","df_train_DG_500_N.to_csv('/content/drive/MyDrive/DM/train_DG_500_N.csv', index=True)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T_02siAEGs4a"},"source":["# 合併三個類別的資料\n","df_train_DG_500_C = pd.read_csv('/content/drive/MyDrive/DM/train_DG_500_C.csv')\n","df_train_DG_500_V = pd.read_csv('/content/drive/MyDrive/DM/train_DG_500_V.csv')\n","df_train_DG_500_N = pd.read_csv('/content/drive/MyDrive/DM/train_DG_500_N.csv')\n","\n","df_train_DG_500_C = df_train_DG_500_C.drop(df_train_DG_500_C.columns[0], axis=1)\n","df_train_DG_500_V = df_train_DG_500_V.drop(df_train_DG_500_V.columns[0], axis=1)\n","df_train_DG_500_N = df_train_DG_500_N.drop(df_train_DG_500_N.columns[0], axis=1)\n","\n","df_train_DG_500 = [df_train_DG_500_C, df_train_DG_500_V, df_train_DG_500_N]\n","df_train_DG_500 = pd.concat(df_train_DG_500).reset_index()\n","df_train_DG_500 = df_train_DG_500.drop(df_train_DG_500.columns[0], axis=1)\n","df_train_DG_500.to_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/train_DG_500.csv', index=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iR97ZUuaVHDW"},"source":["處理train 內資料不平衡的問題，將各類別的資料生至統一485個圖檔（加上ZCA_whitening的參數），並將圖檔轉成80*80的陣列"]},{"cell_type":"code","metadata":{"id":"stC7yO2zKzEL"},"source":["# train data with Data Augmentation generating (with ZCA whitening)\n","gen_tr_batches = 251\n","\n","# Generator for the network's training generator.\n","gen_train = (ImageDataGenerator(rescale=1. / 255.)\n","             .flow_from_directory(dir,\n","                                  target_size=(80, 80),\n","                                  batch_size=1,\n","                                  shuffle=False))\n","gen_tr_x = np.vstack(next(gen_train)[0] for _ in range(gen_tr_batches))\n","\n","# Actual generator for the network's training.\n","g = ImageDataGenerator(rescale=1. / 255.,\n","                       zca_whitening=True)\n","g.fit(gen_tr_x)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0JyrgaP-WWig"},"source":["# 對照檔案名稱確定圖檔之label\n","filenames = []\n","j = 0\n","for i in gen_train:\n","    j = j+1\n","    idx = (gen_train.batch_index - 1) * gen_train.batch_size\n","    print(j, ' ', gen_train.filenames[idx : idx + gen_train.batch_size])\n","    filenames.append(gen_train.filenames[idx : idx + gen_train.batch_size])\n","    if j == 251:\n","      break\n","y_train = []\n","for i in range(251):\n","  if i <111:\n","    y_train.append('C')\n","  elif i <181 :\n","    y_train.append('N')\n","  else:\n","    y_train.append('V')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lYb4lqZngKMt"},"source":["# 生資料\n","for x, y in zip(g.flow(X_train, y_train,  \n","                       batch_size=20, #image we chose\n","        save_to_dir='/content/drive/MyDrive/DM/ZCA',    \n","         save_prefix='aug',      \n","        save_format='jpg'),range(10)) :   \n","  pass"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zf9z4iK-Lx_C"},"source":["# 將生完的圖檔依照類別移到不同資料夾\n","\n","onlyfiles = [f for f in os.listdir(dir) if os.path.isfile(os.path.join(dir, f))]\n","\n","for f in onlyfiles:\n","  file = dir + f\n","  if int(f.split('_')[1])<111:\n","    destination = \"/content/drive/MyDrive/DM/ZCA_500/Covid\"\n","  elif int(f.split('_')[1])<181:\n","    destination = \"/content/drive/MyDrive/DM/ZCA_500/Viral Pneumonia\"\n","  else:\n","    destination = \"/content/drive/MyDrive/DM/ZCA_500/Normal\"\n","\n","  new_path = shutil.move(file, destination)\n","  #print(file)\n","  #print(f.split('_')[1])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LZogh1iHLxV8"},"source":["# 移除過多的資料，使各類資料數量一樣\n","remove = 2\n","while(remove):\n","  dir = \"/content/drive/MyDrive/DM/ZCA_500/Normal/\"\n","  destination = \"/content/drive/MyDrive/DM/throw\"\n","\n","  onlyfiles = [f for f in os.listdir(dir) if os.path.isfile(os.path.join(dir, f))]\n","  r = np.random.randint(len(onlyfiles))\n","  file = dir + onlyfiles[r]\n","\n","  new_path = shutil.move(file, destination)\n","  remove = remove-1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aPADysC8MjXF"},"source":["# define column names as each pixel and label with size = 80*80\n","col2 = []\n","for i in range(80*80):\n","  col2.append('pixel'+str(i+1))\n","col2.append('label')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"e-4_wfCCTlju"},"source":["# 轉成80*80的陣列\n","ZCA_500 = imgpreprocessing('ZCA_500', labels, 80)\n","df_ZCA_500 = pd.DataFrame(ZCA_500, columns = col2)\n","df_ZCA_500.to_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/ZCA_500.csv', index=True)\n","\n","ZCA_test = imgpreprocessing('ZCA_test', labels, 80)\n","df_ZCA_test = pd.DataFrame(ZCA_test, columns = col2)\n","df_ZCA_test.to_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/ZCA_test.csv', index=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MWx0rG6atGlY"},"source":["# Main Code - SVM classification"]},{"cell_type":"markdown","metadata":{"id":"JZvanHPIV3aZ"},"source":["### 原train, 原test"]},{"cell_type":"code","metadata":{"id":"gkBK142zV8SH"},"source":["# reading data\n","df_train = pd.read_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/train.csv')\n","X_train = df_train.iloc[: , 1:-1]\n","y_train = df_train.iloc[: , -1:].values.ravel()\n","\n","df_test = pd.read_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/test.csv')\n","X_test = df_test.iloc[: , 1:-1]\n","y_test = df_test.iloc[: , -1:].values.ravel()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7oKAbGoeLbGK"},"source":["clf_ = SVC(kernel='rbf')\n","Cs = [ 0.01, 0.1, 1, 10, 100]\n","Gammas = [ 1,  100, 'scale']\n","grid = GridSearchCV(clf_,\n","            dict(C=Cs,\n","                 gamma=Gammas),\n","                 cv=5,\n","                 scoring='accuracy',\n","                 n_jobs = 1,\n","                 verbose=1)\n","\n","grid.fit(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hlOQSwSWPg5E","executionInfo":{"status":"ok","timestamp":1624277548103,"user_tz":-480,"elapsed":357,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"34e225d2-399c-4a38-dfec-d4436317ddbf"},"source":["print(grid.best_params_)\n","print(grid.best_score_)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'C': 1, 'gamma': 'scale'}\n","0.916470588235294\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P7eSsF6MTO07","executionInfo":{"status":"ok","timestamp":1624544441005,"user_tz":-480,"elapsed":6535,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"42791918-579f-490f-8ce6-fdd1ee1c0a74"},"source":["# predict test dataset\n","clf = SVC(C = 1, gamma = 'scale')\n","clf.fit(X_train, y_train)\n","y_pred = clf.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","print('accuracy:', accuracy)\n","precision = precision_score(y_test, y_pred, average = 'macro')\n","print('precision:', precision)\n","recall = recall_score(y_test, y_pred, average = 'macro')\n","print('recall:', recall)\n","f1 = f1_score(y_test, y_pred, average = 'macro')\n","print('f1:',f1)\n","cm = confusion_matrix(y_test, y_pred)\n","print('confusion matrix')\n","cm"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy: 0.8636363636363636\n","precision: 0.85984126984127\n","recall: 0.8615384615384616\n","f1: 0.8604096923322175\n","confusion matrix\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[23,  3,  0],\n","       [ 0, 17,  3],\n","       [ 2,  1, 17]])"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"tMLlJxyLWYlo"},"source":["### 平衡的train(各類各111個), 原test\n"]},{"cell_type":"code","metadata":{"id":"pzJHWolkWmUg"},"source":["df_train_DG = pd.read_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/train_DG.csv')\n","X_train_DG = df_train_DG.iloc[: , 1:-1]\n","y_train_DG = df_train_DG.iloc[: , -1:].values.ravel()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RCCqhxt_aexj"},"source":["clf_ = SVC(kernel='rbf')\n","Cs = [ 0.01, 1, 10, 100, 1000]\n","Gammas = [ 1,  100, 'scale']\n","grid = GridSearchCV(clf_,\n","            dict(C=Cs,\n","                 gamma=Gammas),\n","                 cv=5,\n","                 scoring='accuracy',\n","                 n_jobs = 1,\n","                 verbose=2)\n","\n","grid.fit(X_train_DG, y_train_DG)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DadifSiFavPI","executionInfo":{"status":"ok","timestamp":1624278393358,"user_tz":-480,"elapsed":428,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"1f2272ff-f5b9-4476-9109-2fea6703caaf"},"source":["print(grid.best_params_)\n","print(grid.best_score_)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'C': 10, 'gamma': 'scale'}\n","0.9128448665762099\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZJOGIp93cs76","executionInfo":{"status":"ok","timestamp":1624544510764,"user_tz":-480,"elapsed":11948,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"d496fac0-1e1d-4878-8426-b0d252474d87"},"source":["# predict test dataset\n","clf = SVC(C = 10, gamma = 'scale')\n","clf.fit(X_train_DG, y_train_DG)\n","y_pred = clf.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","print('accuracy:', accuracy)\n","precision = precision_score(y_test, y_pred, average = 'macro')\n","print('precision:', precision)\n","recall = recall_score(y_test, y_pred, average = 'macro')\n","print('recall:', recall)\n","f1 = f1_score(y_test, y_pred, average = 'macro')\n","print('f1:',f1)\n","cm = confusion_matrix(y_test, y_pred)\n","print('confusion matrix')\n","cm"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy: 0.9090909090909091\n","precision: 0.9120370370370369\n","recall: 0.9076923076923077\n","f1: 0.9061244019138757\n","confusion matrix\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[24,  2,  0],\n","       [ 0, 19,  1],\n","       [ 0,  3, 17]])"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"egSCa5WqWv7Y"},"source":["### 平衡的train(各類各500個), 原test"]},{"cell_type":"code","metadata":{"id":"5pITwqbPW0Rz"},"source":["df_train_500= pd.read_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/train_DG_500.csv')\n","X_train_500 = df_train_500.iloc[: , 1:-1]\n","y_train_500 = df_train_500.iloc[: , -1:].values.ravel()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cmyEstyqffXh"},"source":["clf_ = SVC(kernel='rbf')\n","Cs = [ 0.01, 1, 10, 100, 1000]\n","Gammas = ['scale']\n","grid = GridSearchCV(clf_,\n","            dict(C=Cs,\n","                 gamma=Gammas),\n","                 cv=3,\n","                 scoring='accuracy',\n","                 n_jobs = 1,\n","                 verbose=2)\n","\n","grid.fit(X_train_500, y_train_500)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rp6tefUal26m","executionInfo":{"status":"ok","timestamp":1624531593440,"user_tz":-480,"elapsed":10,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"d5ac9435-9b8b-4297-f0be-073479fa5de9"},"source":["print(grid.best_params_)\n","print(grid.best_score_)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'C': 10, 'gamma': 'scale'}\n","0.9866666666666667\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hj5LfFCFk6ss","executionInfo":{"status":"ok","timestamp":1624544919882,"user_tz":-480,"elapsed":81466,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"882932f3-0ec9-4a93-d871-d18e1c1f9246"},"source":["# predict test dataset\n","clf = SVC(C = 10, gamma = 'scale')\n","clf.fit(X_train_500, y_train_500)\n","y_pred = clf.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","print('accuracy:', accuracy)\n","precision = precision_score(y_test, y_pred, average = 'macro')\n","print('precision:', precision)\n","recall = recall_score(y_test, y_pred, average = 'macro')\n","print('recall:', recall)\n","f1 = f1_score(y_test, y_pred, average = 'macro')\n","print('f1:',f1)\n","cm = confusion_matrix(y_test, y_pred)\n","print('confusion matrix')\n","cm"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy: 0.9393939393939394\n","precision: 0.9440559440559441\n","recall: 0.9410256410256411\n","f1: 0.9409420988368357\n","confusion matrix\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[24,  2,  0],\n","       [ 0, 20,  0],\n","       [ 2,  0, 18]])"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"rkAviNhqX5iR"},"source":["### ZCA的train（各類各485個）, ZCA的test"]},{"cell_type":"code","metadata":{"id":"1_HWqYlsYT8U"},"source":["df_ZCA_500= pd.read_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/ZCA_500.csv')\n","X_ZCA_500 = df_ZCA_500.iloc[: , 1:-1]\n","y_ZCA_500 = df_ZCA_500.iloc[: , -1:].values.ravel()\n","\n","df_ZCA_test= pd.read_csv('/content/drive/Shareddrives/DataMining_2021/Term Project/Data/ZCA_test.csv')\n","X_ZCA_test = df_ZCA_test.iloc[: , 1:-1]\n","y_ZCA_test = df_ZCA_test.iloc[: , -1:].values.ravel()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FqSu-GboPw_D"},"source":["clf_ = SVC(kernel='rbf')\n","Cs = [ 0.01, 1, 10, 100, 1000]\n","Gammas = [ 1,  100, 'scale']\n","grid = GridSearchCV(clf_,\n","            dict(C=Cs,\n","                 gamma=Gammas),\n","                 cv=5,\n","                 scoring='accuracy',\n","                 n_jobs = 1,\n","                 verbose=2)\n","\n","grid.fit(X_ZCA_500, y_ZCA_500)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aomE_LLobSYq","executionInfo":{"status":"ok","timestamp":1624546656495,"user_tz":-480,"elapsed":3,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"c761ee0d-997f-431e-9906-e9bdcc43ed1f"},"source":["print(grid2.best_params_)\n","print(grid2.best_score_)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'C': 10, 'gamma': 'scale'}\n","0.8927835051546392\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kSAI9mGhZfhU","executionInfo":{"status":"ok","timestamp":1624546700944,"user_tz":-480,"elapsed":29756,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"90c17b9c-24b2-4b09-952b-6b999048b910"},"source":["# predict test dataset\n","clf = SVC(C = 10, gamma = 'scale')\n","clf.fit(X_ZCA_500, y_ZCA_500)\n","y_ZCA_pred = clf.predict(X_ZCA_test)\n","\n","accuracy = accuracy_score(y_ZCA_test, y_ZCA_pred)\n","print('accuracy:', accuracy)\n","precision = precision_score(y_ZCA_test, y_ZCA_pred, average = 'macro')\n","print('precision:', precision)\n","recall = recall_score(y_ZCA_test, y_ZCA_pred, average = 'macro')\n","print('recall:', recall)\n","f1 = f1_score(y_ZCA_test, y_ZCA_pred, average = 'macro')\n","print('f1:',f1)\n","cm = confusion_matrix(y_ZCA_test, y_ZCA_pred)\n","print('confusion matrix')\n","cm"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy: 0.696969696969697\n","precision: 0.7024087024087023\n","recall: 0.6935897435897435\n","f1: 0.6918065090261886\n","confusion matrix\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[19,  2,  5],\n","       [ 2, 12,  6],\n","       [ 1,  4, 15]])"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"uaO0_ZpgiCKG"},"source":["### PCA(略)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R3rv3IyFjOkx","executionInfo":{"status":"ok","timestamp":1624279035679,"user_tz":-480,"elapsed":2657,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"a4b0dacf-fc47-4b41-8e24-e3ee4d933626"},"source":["from sklearn.decomposition import PCA\n","pca = PCA(n_components=50).fit(X_train)\n","pca.explained_variance_ratio_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.2622852 , 0.09951612, 0.06266911, 0.05878379, 0.03897903,\n","       0.03416407, 0.02866697, 0.02299853, 0.02125718, 0.01890149,\n","       0.01544831, 0.01273375, 0.01216144, 0.01133859, 0.01099788,\n","       0.00939089, 0.00835349, 0.00801987, 0.00771597, 0.00701603,\n","       0.00653969, 0.00617734, 0.00567874, 0.00506344, 0.0047871 ,\n","       0.00444651, 0.00438804, 0.00407363, 0.0039176 , 0.00387105,\n","       0.00370409, 0.00365278, 0.00360843, 0.00331137, 0.0032827 ,\n","       0.00311776, 0.00303176, 0.00296274, 0.00287549, 0.00280042,\n","       0.00275806, 0.00267945, 0.00261436, 0.00247221, 0.00241652,\n","       0.00238252, 0.00218467, 0.00212342, 0.00211828, 0.00204425])"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"id":"VM_HeBnnjjD_","executionInfo":{"status":"ok","timestamp":1624279024057,"user_tz":-480,"elapsed":345,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"88f04b56-c545-40a6-f270-c9956275d603"},"source":["importance = pca.explained_variance_ratio_\n","plt.figure(figsize=(15,5))\n","plt.scatter(range(1,71),importance)\n","plt.plot(range(1,71),importance)\n","plt.title('Scree Plot')\n","plt.xlabel('Principal Component')\n","plt.ylabel('Proportion of Variance Explained')\n","plt.grid()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WBxv8h9OkJ1V"},"source":["# predict test dataset\n","clf = SVC(C = 1, gamma = 'scale')\n","P = pca.transform(X_train)\n","PT = pca.transform(X_test)\n","clf.fit(P, y_train)\n","y_pred = clf.predict(PT)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KHtfzV4akmGy","executionInfo":{"status":"ok","timestamp":1624279041505,"user_tz":-480,"elapsed":6,"user":{"displayName":"吳昀蔚","photoUrl":"","userId":"05700590349064845575"}},"outputId":"c5379bb9-eebe-4bf8-9743-80197f75778d"},"source":["accuracy = accuracy_score(y_test, y_pred)\n","print('accuracy:', accuracy)\n","precision = precision_score(y_test, y_pred, average = 'macro')\n","print('precision:', precision)\n","recall = recall_score(y_test, y_pred, average = 'macro')\n","print('recall:', recall)\n","f1 = f1_score(y_test, y_pred, average = 'macro')\n","print('f1:',f1)\n","cm = confusion_matrix(y_test, y_pred)\n","print('confusion matrix')\n","cm"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy: 0.8636363636363636\n","precision: 0.85984126984127\n","recall: 0.8615384615384616\n","f1: 0.8604096923322175\n","confusion matrix\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[23,  3,  0],\n","       [ 0, 17,  3],\n","       [ 2,  1, 17]])"]},"metadata":{"tags":[]},"execution_count":51}]}]}